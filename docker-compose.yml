version: '3'

services:
  reverse-proxy:
    image: traefik:v2.3
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      # Web
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # On map la conf statique dans le conteneur
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      # On map la conf dynamique statique dans le conteneur
      - ./traefik/config.yml:/etc/traefik/config.yml:ro
      # On map les certificats dans le conteneur
      - ./certs:/etc/certs:ro
    networks:
      - transit_idp
      - transit_wp
      - transit_ttyd
    labels:
      # Permettre à ce conteneur d'être accessible par traefik
      # Pour plus d'information, voir : https://docs.traefik.io/providers/docker/#exposedbydefault
      - "traefik.enable=true"
      # Utilise la configuration du routeur "traefik" définie dans le fichier de configuration dynamique : ./traefik/config.yml
      - "traefik.http.routers.traefik=true"

  whoami:
    image: containous/whoami
    container_name: whoami
    security_opt:
      - no-new-privileges:true
    labels:
      - "traefik.enable=true"
      # URL pour accéder à ce conteneur
      - "traefik.http.routers.whoami.rule=Host(`whoami.docker.local`)"
      # Activation de TLS
      - "traefik.http.routers.whoami.tls=true"
      # Si le port est différent de 80, utilisez le service suivant:
      # - "traefik.http.services.<service_name>.loadbalancer.server.port=<port>"
    networks:
      - transit_idp

  mysql:
    image: mysql:latest
    container_name: mysql
    networks:
      transit_wp:
    volumes:
      - ./wordpress/mysql_data:/var/lib/mysql
      # Création d'une base de donnèes MySQL pour Keycloak
      # - ./init:/docker-entrypoint-initdb.d 
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress
    labels:
      - "traefik.enable=false"   
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci

  postgres:
    image: postgres:alpine
    container_name: postgres
    networks:
      transit_idp:
    volumes:
      - ./keycloak/postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    labels:
      - "traefik.enable=false"

  wordpress:
    depends_on:
      - mysql
    image: wordpress:latest
    container_name: wordpress
    hostname: wordpress.docker.local
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      WORDPRESS_DB_HOST: mysql:3306
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress
      WORDPRESS_DB_NAME: wordpress
    networks:
      transit_wp:
    volumes:
      - ./wordpress/plugins:/var/www/html/wp-content/plugins
    labels:
      - "traefik.enable=true"
      # URL pour accéder à ce conteneur
      - "traefik.http.routers.wordpress.rule=Host(`wordpress.docker.local`)"
      # Activation de TLS
      - "traefik.http.routers.wordpress.tls=true"
      # Si le port est différent de 80, utilisez le service suivant:
      - "traefik.http.services.wordpress.loadbalancer.server.port=80"
  
  keycloak:
    depends_on:
       - postgres
    image: quay.io/keycloak/keycloak:12.0.4
    container_name: keycloak
    hostname: auth.docker.local
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    command: 
      - "-b 0.0.0.0 -Dkeycloak.profile.feature.docker=enabled"
      - "-b 0.0.0.0 -Dkeycloak.import=/opt/jboss/keycloak/imports/development-realm.json"
    environment:
      - DB_VENDOR=POSTGRES
      - DB_ADDR=postgres
      - DB_PORT=5432
      - DB_DATABASE=keycloak
      - DB_USER=keycloak
      - DB_SCHEMA=public
      - DB_PASSWORD=keycloak
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=password
      - PROXY_ADDRESS_FORWARDING=true
      # - KEYCLOAK_LOGLEVEL=DEBUG
      - JGROUPS_DISCOVERY_PROTOCOL=JDBC_PING
      - JGROUPS_DISCOVERY_PROPERTIES=datasource_jndi_name=java:jboss/datasources/KeycloakDS,info_writer_sleep_time=500,initialize_sql="CREATE TABLE IF NOT EXISTS JGROUPSPING ( own_addr varchar(200) NOT NULL, cluster_name varchar(200) NOT NULL, created timestamp default current_timestamp, ping_data BYTEA, constraint PK_JGROUPSPING PRIMARY KEY (own_addr, cluster_name))"
      # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the MySQL JDBC driver documentation in order to use it.
      # - JDBC_PARAMS: "connectTimeout=30000"
    volumes:
      - ./keycloak/imports:/opt/jboss/keycloak/imports
      - ./keycloak/imports/IBMSecurityVerifyAuthenticators-1.0.0.jar:/opt/jboss/keycloak/standalone/deployments/IBMSecurityVerifyAuthenticators-1.0.0.jar
    networks:
      transit_idp:
    labels:
      - "traefik.enable=true"
      # URL pour accéder à ce conteneur
      - "traefik.http.routers.keycloak.rule=Host(`auth.docker.local`)"
      # Activation de TLS
      - "traefik.http.routers.keycloak.tls=true"
      # Si le port est différent de 80, utilisez le service suivant:
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
    
  keycloak-gatekeeper:
    depends_on:
       - keycloak
    image: 'quay.io/anass/keycloak-gatekeeper:latest'
    container_name: gatekeeper
    restart: unless-stopped
    networks:
      transit_ttyd:
    external_links:
      - 'traefik:auth.docker.local'
    volumes:
      - ./ttyd/keycloak-gatekeeper.conf:/etc/keycloak-gatekeeper.conf
    entrypoint:
      - /opt/keycloak-gatekeeper
      - --config=/etc/keycloak-gatekeeper.conf
    labels:
      - "traefik.enable=true"
      # URL pour accéder à ce conteneur
      - "traefik.http.routers.ttyd.rule=Host(`ttyd.docker.local`)"
      # Activation de TLS
      - "traefik.http.routers.ttyd.tls=true"
      # Si le port est différent de 80, utilisez le service suivant:
      - "traefik.http.services.ttyd.loadbalancer.server.port=3000"

  ttyd:
    image: 'quay.io/anass/kali-ttyd'
    container_name: ttyd
    networks:
      transit_ttyd:
    labels:
      - "traefik.enable=false"
  
volumes:
  mysql_data:
    driver: local
  postgres_data:
    driver: local

networks:
  transit_idp:
    external: true
  transit_wp:
    external: true
  transit_ttyd:
    external: true
